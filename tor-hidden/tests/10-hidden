#!/usr/bin/env python3

import os
import amulet
import socket
from lib import assert_connect

d = amulet.Deployment(series='focal')
d.add('tor-hidden', '../builds/tor-hidden')
d.add('apache2')
d.relate('tor-hidden:reverseproxy', 'apache2:website')

try:
    # Create the deployment described above, give us 900 seconds to do it
    d.setup(timeout=900)

    # Setup will only make sure the services are deployed, related, and in a
    # "started" state. We can employ the sentries to actually make sure there
    # are no more hooks being executed on any of the nodes.
    d.sentry.wait()
except amulet.helpers.TimeoutError:
    amulet.raise_status(amulet.SKIP, msg="Environment wasn't stood up in time")
except:
    # Something else has gone wrong, raise the error so we can see it and this
    # will automatically "FAIL" the test.
    raise

# Shorten the names a little to make working with unit data easier
tor_unit = d.sentry['tor-hidden'][0]

# Test that hidden service has a .onion address
print("checking hidden service hostname...", end='')
out, rc = tor_unit.run('cat /var/lib/tor/apache2/hostname')
assert rc==0, "failed to cat hidden service hostname"
assert out.endswith(".onion"), "unexpected hostname: %s" % (out)
print("OK")
